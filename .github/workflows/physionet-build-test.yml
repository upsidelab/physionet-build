# a github action on the dev branch that performs a build - test in a docker container
name: physionet-build-test

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  container:
    runs-on: ubuntu-latest
    container: debian:10
    services:
      db:
        image: postgres
        env:
          POSTGRES_DB: physionet
          POSTGRES_USER: physionet
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DJANGO_SETTINGS_MODULE: physionet.settings.settings
      ENVIRONMENT: development
      SECRET_KEY: asdf
      ALLOWED_HOSTS: localhost
      DB_USER: physionet
      DB_NAME: physionet
      DB_PASSWORD: password
      DB_HOST: db
      DEBUG: True
      SITE_ID: 4
      EMAIL_HOST: localhost
      DEFAULT_FROM_EMAIL: localhost@localhost
      CONTACT_EMAIL: 'PhysioNet Contact <contact@dev.physionet.org>'
      SERVER_EMAIL: 'PhysioNet System <root@dev.physionet.org>'
      ADMINS_NAME: PhysioNet Technical
      ADMINS_MAIL: technical@dev.physionet.org
      OCRID_REDIRECT_URI: http://127.0.0.1:8000/authorcid
    defaults:
      run:
        shell: bash
    steps:
      - name: checkout physionet-build repo
        uses: actions/checkout@v2
      - name: update packages
        run: |
          apt-get update --yes
      - name: install and configure needed software
        run: |
          apt-get install sudo python3-dev python3-pip build-essential postgresql zip wget python-virtualenv --yes
          ln -sT .env.example .env
      - name: install repo dependencies
        # add virtual env path to github_path so each run: process will see it
        run: |
          export VIRTUAL_ENV=/env3
          virtualenv -p python3.7 $VIRTUAL_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          source $VIRTUAL_ENV/bin/activate
          pip3 install poetry
          poetry config virtualenvs.create false
          poetry install --no-root
      - name: install libseccomp-dev for syscall filtering
        run: |
          apt-get install libseccomp-dev
      - name: setup postgres
        run: |
          service postgresql start
          sudo -u postgres psql -c "create user physionet with superuser password 'password';" -U postgres
          sudo -u postgres psql -c "create database physionet;" -U postgres
      - name: install and setup wfdb
        run: |
          wget https://github.com/bemoody/wfdb/archive/10.6.2.tar.gz -O wfdb.tar.gz
          tar -xf wfdb.tar.gz
          (cd wfdb-* && ./configure --without-netfiles && make -C lib install && make -C data install)
      - name: run linker for newly installed software
        run: |
          ldconfig
      - name: install and setup lightwave
        run: |
          wget https://github.com/bemoody/lightwave/archive/bfe908a7f53434df61fd2444bf8c235e3e6226fc.tar.gz -O lightwave.tar.gz
          tar -xf lightwave.tar.gz
          (cd lightwave-* && make CGIDIR=/usr/local/bin sandboxed-server)
          wget https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-linux64.tar.gz
      - name: install web driver - geckodriver
        run: |
          mkdir geckodriver
          tar -xf geckodriver-v0.23.0-linux64.tar.gz -C geckodriver
          echo "$PWD/geckodriver" >> $GITHUB_PATH
      - name: setup and test physionet, check amount of code tested
        run: |
          cd physionet-django
          python manage.py makemigrations --dry-run --no-input --check
          python manage.py resetdb
          python manage.py loaddemo
          python manage.py test --verbosity=3 --keepdb
          coverage run --source='.' manage.py test --keepdb
          coverage report -m
